# -*- coding: utf-8 -*-
"""MooraSPK.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SaGkbZro_3MMTDKKFlXOD0Srvd8H1viJ
"""

import numpy as np 
import math

class Moora:
  def __init__(self, bobot , alternatif , label):
    self.bobot = bobot
    self.alternatif = alternatif
    self.label = label
    self.norm_matrix = np.zeros((self.alternatif.shape[0],self.alternatif.shape[1]),dtype=np.double)
    self.optimasi = np.zeros((self.alternatif.shape[0],self.alternatif.shape[1]),dtype=np.double)
    self.rank = np.zeros((self.alternatif.shape[0],1),dtype=np.double)
    self.calculate_norm()

  def calculate_norm(self):
    self.alternatif = self.alternatif.T
    self.norm_matrix = self.norm_matrix.T
    for i in range(self.norm_matrix.shape[0]):
      for j in range(self.norm_matrix.shape[1]):
        self.norm_matrix[i,j] = self.alternatif[i,j] / math.sqrt(np.sum(self.alternatif[i] ** 2))
    
    self.alternatif = self.alternatif.T
    self.norm_matrix = self.norm_matrix.T

    self.calculate_optimasi_multiobjecktif()
    
  def calculate_optimasi_multiobjecktif(self):
    self.norm_matrix = self.norm_matrix.T
    self.optimasi = self.optimasi.T

    if(len(self.bobot) != 0):
      for i in range(self.norm_matrix.shape[0]):
        self.optimasi[i] = self.norm_matrix[i] * self.bobot[i]
    
    else:
      self.optimasi = self.norm_matrix

    self.optimasi = self.optimasi.T
    cost = np.where(self.label == 0)
    ben = np.where(self.label == 1)
    for i in range(0,self.optimasi.shape[0]):
      self.rank[i] = np.sum(self.optimasi[i,ben]) - np.sum(self.optimasi[i,cost])
    
    print("Bobot\n")
    print(self.bobot)
    print("-----------------------------------------------------------------------\n")

    print("Alternatif\n")
    print(self.alternatif)
    print("-----------------------------------------------------------------------\n")

    print("Normalisasi\n")
    print(self.norm_matrix)
    print("-----------------------------------------------------------------------\n")

    print("Optimasi\n")
    print(self.optimasi)
    print("-----------------------------------------------------------------------\n")
    
    new_rank = np.array([[0,0]]*self.rank.shape[0],dtype=float)
    for i in range (0,new_rank.shape[0]):
        new_rank[i][0] = self.rank[i][0]
        new_rank[i][1] = i
    
    print("Ranking Before Sort\n")
    print(new_rank)
    print("-----------------------------------------------------------------------\n")

    print("Ranking After Sort\n")
    sort_rank = new_rank[new_rank[:,0].argsort()[::-1]]
    print(sort_rank)
    print("-----------------------------------------------------------------------\n")
      
if __name__ == "__main__" :
  try:
    # Benefit 1
    # Cost 0
    # alternatif = np.array([[1,1,3,4,1,4],[1,1,4,3,1,3],[1,1,4,4,1,4],[1,1,3,3,0,3],[1,1,3,3,1,4]])
    # bobot = np.array([0.290,0.173,0.091,0.162,0.080,0.204])
    # # bobot = np.array([])
    # label = np.array([1,1,0,0,1,1])
    
    alternatif = np.array([[500000,15,0.25,0.5,0.5],[600000,6,0.5,0.5,0.5],[1000000,3,0.75,0.5,0.25],
                           [650000,10,0.5,0.5,0.5],[500000,7,0.25,0.5,0.5],[600000,3,0.5,0.25,0.25],[400000,5,0.25,0.25,0.25],
                           [700000,10,0.5,0.5,0.5],[500000,8,0.25,0.5,0.5],[1200000,10,0.75,0.5,0.5]])
    bobot = np.array([0.25,0.2,0.2,0.2,0.15])
    label = np.array([0,1,0,0,0])
    
    # alternatif = np.array([[5,3,3,5,5,5],[4,3,3,5,5,3],[3,3,2,3,1,3],[4,3,3,3,3,5],[3,1,1,3,5,5],[2,1,4,3,1,1],[2,1,4,3,3,5],[1,1,5,3,5,1]])
    # bobot = np.array([0.1,0.15,0.15,0.2,0.15,0.25])
    # label = np.array([0,1,1,1,0,1])
    moora = Moora(bobot,alternatif,label)
  except Exception as e:
    print(e)